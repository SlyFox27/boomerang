const { draw, drawAsString } = require('terminal-img');
const readlineSync = require('readline-sync');
const sound = require('play-sound')((opts = {}));
const { EOL } = require('os');
const logPlayers = require('../logPlayers');
const addPlayers = require('../addPlayers');
const Hero = require('./game-models/Hero');
const Enemy = require('./game-models/Enemy');
const View = require('./View');
const Boomerang = require('./game-models/Boomerang');
// –ò–ª–∏ –º–æ–∂–Ω–æ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å,
// –∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –ø—Ä—è–º–æ –∏–∑ run.js –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ new Game().

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã.
// –¢—É—Ç –±—É–¥—É—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–ø—É—Å–∫.
let playerName = '';

class Game {
  constructor({ trackLength }) {
    this.trackLength = trackLength;
    this.boomerang = new Boomerang(trackLength);
    this.hero = new Hero({
      name: playerName,
      position: 0,
      boomerang: this.boomerang,
    });
    this.enemy = new Enemy(trackLength);
    this.view = new View(this);
    this.track = [];
    this.regenerateTrack();
  }

  regenerateTrack() {
    // –°–±–æ—Ä–∫–∞ –≤—Å–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ (–≥–µ—Ä–æ–π, –≤—Ä–∞–≥(–∏), –æ—Ä—É–∂–∏–µ)
    // –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    this.track = new Array(this.trackLength).fill('_ ').map((el, id) => {
      return id % 9 === 1 ? 'üå≤üè∞üèîÔ∏è' : el;
    });
    this.track[this.hero.position] = this.hero.skin;
    this.track[this.enemy.position] = this.enemy.skin; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    if (
      this.hero.boomerang.position >= 0 &&
      this.hero.boomerang.position < this.trackLength
    ) {
      this.track[this.hero.boomerang.position] = this.hero.boomerang.skin;
    }
  }

  check() {
    if (this.hero.position === this.enemy.position) {
      this.hero.die();
    }
  }

  async play() {
    await draw('src/images/logo.png', { width: 80, height: 40 });
    await draw('src/images/start.png', { width: 80, height: 40 });

    function registratePlayer() {
      playerName = readlineSync.question('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ');
      process.stdin.resume();

      return playerName;
    }

    this.hero.name = await registratePlayer();
    this.audio = sound.play('src/sounds/battle.wav');

    setInterval(() => {
      // Let's play!
      this.handleCollisions();
      this.regenerateTrack();

      // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–≤–∏–∂–µ–Ω–∏—è –≤—Ä–∞–≥–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ª–µ–≤–æ
      this.enemy.moveLeft();

      // –ï—Å–ª–∏ –≤—Ä–∞–≥ –¥–æ—Å—Ç–∏–≥ –∫—Ä–∞—è —Ç—Ä–µ–∫–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
      if (this.enemy.position < 0) {
        this.enemy.position = this.trackLength - 1;
      }

      this.view.render(this.track);
    }, 100); // –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  }

  async win() {
    console.clear();

    this.audio.kill();
    sound.play('src/sounds/win.wav');

    await draw('src/images/victory.png', { width: 80, height: 40 });
    await addPlayers(this.hero.name, this.hero.scores);

    console.log(`–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤—ã –ø–æ–±–µ–¥–∏–ª–∏.${EOL}C–∞–º–æ–µ –≤—Ä–µ–º—è —Å—ã–≥—Ä–∞—Ç—å –≤ –≥–≤–∏–Ω—Ç.`);
    console.log(`–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.hero.scores} / 100`);
    console.log(EOL);

    await logPlayers();

    console.log(`${EOL}Created by "CD Projekt Red" with love${EOL}`);

    process.exit();
  }

  async lose() {
    console.clear();

    sound.play('src/sounds/death.wav');
    this.audio.kill();

    await draw('src/images/defeat.png', { width: 80, height: 40 });
    await addPlayers(this.hero.name, this.hero.scores);

    console.log(
      `–°–æ —Å–º–µ—Ä—Ç—å—é —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∏—Ç—å –≤–∞—à–µ–π —Å—É–¥—å–±—ã –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è.${EOL}–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—á–µ–Ω–∏–µ —Å—É–¥—å–±—ã, –∏–ª–∏ –∂–∏–≤–∏—Ç–µ –¥–∞–ª—å—à–µ –≤ –ø—Ä–æ–∫–ª—è—Ç–æ–º –º–∏—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º–∏ –∏ —Å–æ–∑–¥–∞–ª–∏.${EOL}`
    );
    console.log(`–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${this.hero.scores} / 100`);
    console.log(EOL);

    await logPlayers();

    console.log(`${EOL}Created by "CD Projekt Red" with love${EOL}`);

    process.exit();
  }

  handleCollisions() {
    if (this.hero.position === this.enemy.position) {
      this.hero.die();

      if (this.hero.lives <= 0) {
        this.hero.die();
        this.lose();
      }
    }

    if (
      this.boomerang.position === this.enemy.position ||
      this.boomerang.position === this.enemy.position + 1
    ) {
      this.enemy.die();
      this.boomerang.position = undefined;

      this.hero.addScores();
      if (this.hero.scores >= 100) {
        this.win();
      }
      // –û–±–Ω—É–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –±—É–º–µ—Ä–∞–Ω–≥–∞ –ø–æ—Å–ª–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞–≥–æ–º
      this.boomerang.position = this.hero.position;
      this.enemy = new Enemy(this.trackLength); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤—Ä–∞–≥–∞
    }
  }
}

module.exports = Game;
